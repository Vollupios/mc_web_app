@model IntranetDocumentos.Models.ViewModels.DocumentWorkflowViewModel
@{
    ViewData["Title"] = "Workflow do Documento";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">
                <i class="bi bi-diagram-3 text-primary me-2"></i>
                Workflow do Documento
            </h1>
            <small class="text-muted">@Model.Document.OriginalFileName</small>
        </div>
        
        <div class="btn-group" role="group">
            <a asp-action="Index" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left me-1"></i>
                Voltar ao Dashboard
            </a>
            <a asp-action="History" asp-route-id="@Model.Document.Id" class="btn btn-outline-info">
                <i class="bi bi-clock-history me-1"></i>
                Histórico
            </a>
        </div>
    </div>

    <div class="row">
        <!-- Informações do Documento -->
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-file-earmark me-2"></i>
                        Informações do Documento
                    </h5>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-5">Nome:</dt>
                        <dd class="col-sm-7">@Model.Document.OriginalFileName</dd>
                        
                        <dt class="col-sm-5">Departamento:</dt>
                        <dd class="col-sm-7">
                            <span class="badge bg-secondary">@Model.Document.DepartmentName</span>
                        </dd>
                        
                        <dt class="col-sm-5">Status Atual:</dt>
                        <dd class="col-sm-7">
                            <span class="badge @GetStatusBadgeClass(Model.Document.Status)">
                                @GetStatusDisplayName(Model.Document.Status)
                            </span>
                        </dd>
                        
                        <dt class="col-sm-5">Versão:</dt>
                        <dd class="col-sm-7">v@Model.Document.Version</dd>
                        
                        <dt class="col-sm-5">Enviado por:</dt>
                        <dd class="col-sm-7">@Model.Document.UploaderName</dd>
                        
                        <dt class="col-sm-5">Data de envio:</dt>
                        <dd class="col-sm-7">@Model.Document.UploadDate.ToString("dd/MM/yyyy HH:mm")</dd>
                        
                        <dt class="col-sm-5">Última modificação:</dt>
                        <dd class="col-sm-7">@Model.Document.LastModified.ToString("dd/MM/yyyy HH:mm")</dd>
                        
                        @if (!string.IsNullOrEmpty(Model.Document.Description))
                        {
                            <dt class="col-sm-5">Descrição:</dt>
                            <dd class="col-sm-7">@Model.Document.Description</dd>
                        }
                    </dl>
                    
                    <div class="mt-3">
                        <a asp-controller="Documents" asp-action="Download" asp-route-id="@Model.Document.Id" 
                           class="btn btn-primary btn-sm">
                            <i class="bi bi-download me-1"></i>
                            Baixar Arquivo
                        </a>
                    </div>
                </div>
            </div>

            <!-- Ações Disponíveis -->
            @if (Model.AvailableActions.Any())
            {
                <div class="card shadow-sm mt-4">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-lightning me-2"></i>
                            Ações Disponíveis
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            @foreach (var action in Model.AvailableActions)
                            {
                                <button type="button" class="btn @GetActionButtonClass(action) btn-sm" 
                                        onclick="showActionModal(@Model.Document.Id, '@action', '@Model.Document.OriginalFileName')">
                                    <i class="@GetActionIcon(action) me-2"></i>
                                    @GetActionDisplayName(action)
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Informações do Revisor Atual -->
            @if (!string.IsNullOrEmpty(Model.Document.AssignedToUserName))
            {
                <div class="card shadow-sm mt-4">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-person-check me-2"></i>
                            Revisor Atual
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="bg-primary bg-opacity-10 p-2 rounded me-3">
                                <i class="bi bi-person text-primary"></i>
                            </div>
                            <div>
                                <div class="fw-medium">@Model.Document.AssignedToUserName</div>
                                @if (Model.Document.DueDate.HasValue)
                                {
                                    <small class="text-muted">Prazo: @Model.Document.DueDate.Value.ToString("dd/MM/yyyy")</small>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Timeline do Workflow -->
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-clock-history me-2"></i>
                        Timeline do Workflow
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.WorkflowHistory.Any())
                    {
                        <div class="timeline">
                            @foreach (var item in Model.WorkflowHistory.OrderByDescending(h => h.CreatedAt))
                            {
                                <div class="timeline-item">
                                    <div class="timeline-marker @GetTimelineMarkerClass(item.Action)">
                                        <i class="@GetActionIcon(item.Action)"></i>
                                    </div>
                                    <div class="timeline-content">
                                        <div class="card border-0 shadow-sm">
                                            <div class="card-body p-3">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <h6 class="mb-0">@GetActionDisplayName(item.Action)</h6>
                                                    <small class="text-muted">@item.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                                </div>
                                                
                                                <div class="d-flex align-items-center mb-2">
                                                    <i class="bi bi-person text-muted me-2"></i>
                                                    <span class="text-muted">@item.UserName</span>
                                                </div>
                                                
                                                @if (!string.IsNullOrEmpty(item.Comments))
                                                {
                                                    <div class="bg-light p-2 rounded">
                                                        <small class="text-muted">Comentários:</small>
                                                        <div>@item.Comments</div>
                                                    </div>
                                                }
                                                
                                                @if (!string.IsNullOrEmpty(item.AssignedToUserName))
                                                {
                                                    <div class="mt-2">
                                                        <small class="text-muted">Atribuído a:</small>
                                                        <span class="badge bg-info">@item.AssignedToUserName</span>
                                                    </div>
                                                }
                                                
                                                @if (item.DueDate.HasValue)
                                                {
                                                    <div class="mt-2">
                                                        <small class="text-muted">Prazo:</small>
                                                        <span class="badge bg-warning">@item.DueDate.Value.ToString("dd/MM/yyyy")</span>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <i class="bi bi-clock-history display-4 d-block mb-3"></i>
                            <p>Nenhuma ação registrada ainda para este documento.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Ações -->
<div class="modal fade" id="actionModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="actionModalTitle">Confirmar Ação</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="ExecuteAction" method="post">
                <div class="modal-body">
                    <input type="hidden" id="actionDocumentId" name="documentId">
                    <input type="hidden" id="actionType" name="action">
                    
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        <span id="actionMessage"></span>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="actionComments" class="form-label">
                                    Comentários <span class="text-danger" id="commentsRequired" style="display: none;">*</span>
                                </label>
                                <textarea class="form-control" id="actionComments" name="comments" rows="4" 
                                          placeholder="Adicione comentários sobre esta ação..."></textarea>
                                <div class="form-text">
                                    Descreva o motivo da ação, observações importantes ou próximos passos.
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row" id="assignReviewerSection" style="display: none;">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="assignedToUserId" class="form-label">Atribuir a <span class="text-danger">*</span></label>
                                <select class="form-select" id="assignedToUserId" name="assignedToUserId">
                                    <option value="">Selecione um revisor...</option>
                                    <!-- Será preenchido via JavaScript -->
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="dueDate" class="form-label">Prazo</label>
                                <input type="datetime-local" class="form-control" id="dueDate" name="dueDate">
                            </div>
                        </div>
                    </div>
                    
                    <div class="row" id="dueDateSection" style="display: none;">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="generalDueDate" class="form-label">Prazo</label>
                                <input type="datetime-local" class="form-control" id="generalDueDate" name="dueDate">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary" id="confirmActionBtn">Confirmar</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Função para mostrar modal de ação
        function showActionModal(documentId, action, fileName) {
            document.getElementById('actionDocumentId').value = documentId;
            document.getElementById('actionType').value = action;
            document.getElementById('actionModalTitle').textContent = getActionTitle(action);
            document.getElementById('actionMessage').textContent = `Você está prestes a executar a ação "${getActionDisplayName(action)}" no documento "${fileName}".`;
            
            // Configurar botão
            const btn = document.getElementById('confirmActionBtn');
            btn.className = 'btn ' + getActionButtonClass(action);
            btn.textContent = 'Confirmar ' + getActionDisplayName(action);
            
            // Mostrar/ocultar seções específicas
            const isAssignReviewer = action === 'AssignReviewer';
            const needsDueDate = ['StartReview', 'RequestChanges'].includes(action);
            const needsComments = ['Reject', 'RequestChanges'].includes(action);
            
            document.getElementById('assignReviewerSection').style.display = isAssignReviewer ? 'block' : 'none';
            document.getElementById('dueDateSection').style.display = needsDueDate && !isAssignReviewer ? 'block' : 'none';
            document.getElementById('commentsRequired').style.display = needsComments ? 'inline' : 'none';
            
            if (needsComments) {
                document.getElementById('actionComments').required = true;
            } else {
                document.getElementById('actionComments').required = false;
            }
            
            new bootstrap.Modal(document.getElementById('actionModal')).show();
        }

        // Funções auxiliares
        function getActionTitle(action) {
            const titles = {
                'Submit': 'Enviar para Revisão',
                'Approve': 'Aprovar Documento',
                'Reject': 'Rejeitar Documento',
                'RequestChanges': 'Solicitar Alterações',
                'Publish': 'Publicar Documento',
                'Archive': 'Arquivar Documento',
                'Reactivate': 'Reativar Documento',
                'AssignReviewer': 'Atribuir Revisor',
                'StartReview': 'Iniciar Revisão',
                'CompleteReview': 'Concluir Revisão'
            };
            return titles[action] || 'Ação';
        }

        function getActionDisplayName(action) {
            const names = {
                'Submit': 'Enviar para Revisão',
                'Approve': 'Aprovar',
                'Reject': 'Rejeitar',
                'RequestChanges': 'Solicitar Alterações',
                'Publish': 'Publicar',
                'Archive': 'Arquivar',
                'Reactivate': 'Reativar',
                'AssignReviewer': 'Atribuir Revisor',
                'StartReview': 'Iniciar Revisão',
                'CompleteReview': 'Concluir Revisão'
            };
            return names[action] || action;
        }

        function getActionButtonClass(action) {
            const classes = {
                'Submit': 'btn-primary',
                'Approve': 'btn-success',
                'Reject': 'btn-danger',
                'RequestChanges': 'btn-warning',
                'Publish': 'btn-info',
                'Archive': 'btn-secondary',
                'Reactivate': 'btn-success',
                'AssignReviewer': 'btn-primary',
                'StartReview': 'btn-primary',
                'CompleteReview': 'btn-success'
            };
            return classes[action] || 'btn-primary';
        }
    </script>
}

@functions {
    private string GetStatusBadgeClass(DocumentStatus status)
    {
        return status switch
        {
            DocumentStatus.Draft => "bg-secondary",
            DocumentStatus.PendingReview => "bg-warning",
            DocumentStatus.InReview => "bg-primary",
            DocumentStatus.PendingApproval => "bg-info",
            DocumentStatus.Approved => "bg-success",
            DocumentStatus.Rejected => "bg-danger",
            DocumentStatus.ChangesRequested => "bg-warning",
            DocumentStatus.Published => "bg-info",
            DocumentStatus.Archived => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetStatusDisplayName(DocumentStatus status)
    {
        return status switch
        {
            DocumentStatus.Draft => "Rascunho",
            DocumentStatus.PendingReview => "Aguardando Revisão",
            DocumentStatus.InReview => "Em Revisão",
            DocumentStatus.PendingApproval => "Aguardando Aprovação",
            DocumentStatus.Approved => "Aprovado",
            DocumentStatus.Rejected => "Rejeitado",
            DocumentStatus.ChangesRequested => "Alterações Solicitadas",
            DocumentStatus.Published => "Publicado",
            DocumentStatus.Archived => "Arquivado",
            _ => status.ToString()
        };
    }

    private string GetActionDisplayName(WorkflowAction action)
    {
        return action switch
        {
            WorkflowAction.Submit => "Enviar para Revisão",
            WorkflowAction.Approve => "Aprovar",
            WorkflowAction.Reject => "Rejeitar",
            WorkflowAction.RequestChanges => "Solicitar Alterações",
            WorkflowAction.Publish => "Publicar",
            WorkflowAction.Archive => "Arquivar",
            WorkflowAction.Reactivate => "Reativar",
            WorkflowAction.AssignReviewer => "Atribuir Revisor",
            WorkflowAction.StartReview => "Iniciar Revisão",
            WorkflowAction.CompleteReview => "Concluir Revisão",
            _ => action.ToString()
        };
    }

    private string GetActionButtonClass(WorkflowAction action)
    {
        return action switch
        {
            WorkflowAction.Submit => "btn-outline-primary",
            WorkflowAction.Approve => "btn-outline-success",
            WorkflowAction.Reject => "btn-outline-danger",
            WorkflowAction.RequestChanges => "btn-outline-warning",
            WorkflowAction.Publish => "btn-outline-info",
            WorkflowAction.Archive => "btn-outline-secondary",
            WorkflowAction.Reactivate => "btn-outline-success",
            WorkflowAction.AssignReviewer => "btn-outline-primary",
            WorkflowAction.StartReview => "btn-outline-primary",
            WorkflowAction.CompleteReview => "btn-outline-success",
            _ => "btn-outline-primary"
        };
    }

    private string GetActionIcon(WorkflowAction action)
    {
        return action switch
        {
            WorkflowAction.Submit => "bi-send",
            WorkflowAction.Approve => "bi-check-lg",
            WorkflowAction.Reject => "bi-x-lg",
            WorkflowAction.RequestChanges => "bi-pencil",
            WorkflowAction.Publish => "bi-globe",
            WorkflowAction.Archive => "bi-archive",
            WorkflowAction.Reactivate => "bi-arrow-clockwise",
            WorkflowAction.AssignReviewer => "bi-person-plus",
            WorkflowAction.StartReview => "bi-play",
            WorkflowAction.CompleteReview => "bi-check2-all",
            _ => "bi-gear"
        };
    }

    private string GetTimelineMarkerClass(WorkflowAction action)
    {
        return action switch
        {
            WorkflowAction.Submit => "bg-primary",
            WorkflowAction.Approve => "bg-success",
            WorkflowAction.Reject => "bg-danger",
            WorkflowAction.RequestChanges => "bg-warning",
            WorkflowAction.Publish => "bg-info",
            WorkflowAction.Archive => "bg-secondary",
            WorkflowAction.Reactivate => "bg-success",
            WorkflowAction.AssignReviewer => "bg-primary",
            WorkflowAction.StartReview => "bg-primary",
            WorkflowAction.CompleteReview => "bg-success",
            _ => "bg-secondary"
        };
    }
}
