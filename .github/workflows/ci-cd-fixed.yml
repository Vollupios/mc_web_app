name: CI/CD Pipeline - Intranet Documentos

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './mc_web_app/IntranetDocumentos.csproj'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}
      
    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test ${{ env.PROJECT_PATH }} --no-build --configuration Release --verbosity normal
      
    - name: Generate test coverage
      run: |
        dotnet test ${{ env.PROJECT_PATH }} --collect:"XPlat Code Coverage" --results-directory ./coverage
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Run security scan
      run: |
        dotnet list package --vulnerable --include-transitive
        dotnet list package --deprecated
        
    - name: Check for outdated packages
      run: dotnet list package --outdated

  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install code analysis tools
      run: |
        dotnet tool install --global dotnet-format
        dotnet tool install --global security-scan
        
    - name: Run code formatting check
      run: dotnet format ${{ env.PROJECT_PATH }} --verify-no-changes --verbosity diagnostic
      
    - name: Static code analysis
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release /p:TreatWarningsAsErrors=true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, quality-check]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build for deployment
      run: |
        dotnet restore ${{ env.PROJECT_PATH }}
        dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
        dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./publish
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: staging-build
        path: ./publish
        retention-days: 30

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, quality-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build for production
      run: |
        dotnet restore ${{ env.PROJECT_PATH }}
        dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore
        dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --no-build --output ./publish
        
    - name: Upload production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: ./publish
        retention-days: 90
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## Intranet Documentos - Release v${{ github.run_number }}
          
          ### üöÄ Deployed Features:
          - Sistema de gest√£o de documentos
          - Autentica√ß√£o e autoriza√ß√£o
          - Notifica√ß√µes por email
          - Gest√£o de ramais e reuni√µes
          - Analytics e relat√≥rios
          - Backup autom√°tico
          
          ### üìã Build Information:
          - .NET Version: ${{ env.DOTNET_VERSION }}
          - Build Date: ${{ github.event.head_commit.timestamp }}
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' }}
      run: |
        echo "‚úÖ Deployment successful!"
        echo "Build completed for ${{ github.ref_name }} branch"
        
    - name: Notify on failure
      if: ${{ needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' }}
      run: |
        echo "‚ùå Deployment failed!"
        echo "Please check the logs for ${{ github.ref_name }} branch"
