        /// <summary>
        /// üîí Realiza login do usu√°rio com rate limiting baseado em email/usu√°rio espec√≠fico
        /// </summary>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Login(LoginViewModel model, string? returnUrl = null)
        {
            ViewBag.ReturnUrl = returnUrl;

            if (ModelState.IsValid)
            {
                var clientIp = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "Unknown";

                // üîí NOVO: Verificar rate limiting por usu√°rio espec√≠fico
                if (!await _userRateLimitingService.IsLoginAllowedAsync(model.Email, clientIp))
                {
                    var status = await _userRateLimitingService.GetUserStatusAsync(model.Email);
                    
                    _logger.LogWarning("üîí LOGIN BLOQUEADO: Usu√°rio {Email} excedeu limite de tentativas - Bloqueado at√©: {LockoutUntil} (IP: {IP})", 
                        model.Email, status.LockoutUntil, clientIp);
                    
                    var lockoutMessage = status.LockoutUntil.HasValue 
                        ? $"Muitas tentativas de login. Conta bloqueada at√© {status.LockoutUntil.Value.ToString("HH:mm")}."
                        : $"Muitas tentativas de login. Voc√™ pode tentar novamente em alguns minutos.";
                    
                    ModelState.AddModelError(string.Empty, lockoutMessage);
                    return View(model);
                }

                _logger.LogInformation("üîí Tentativa de login para: {Email} do IP: {IP}", model.Email, clientIp);
                
                var result = await _signInManager.PasswordSignInAsync(
                    model.Email, 
                    model.Password, 
                    model.RememberMe, 
                    lockoutOnFailure: false); // Rate limiting pr√≥prio, n√£o usar o do Identity

                if (result.Succeeded)
                {
                    _logger.LogInformation("‚úÖ Usu√°rio {Email} logado com sucesso.", model.Email);
                    
                    // üîí Registrar login bem-sucedido (limpa hist√≥rico de falhas)
                    await _userRateLimitingService.RecordLoginAttemptAsync(model.Email, clientIp, true);
                    
                    return LocalRedirect(returnUrl ?? "/Documents");
                }

                if (result.RequiresTwoFactor)
                {
                    _logger.LogInformation("Login requer autentica√ß√£o de dois fatores para {Email}.", model.Email);
                    return RedirectToAction(nameof(LoginWith2fa), new { returnUrl, model.RememberMe });
                }

                if (result.IsLockedOut)
                {
                    _logger.LogWarning("Conta bloqueada para {Email}.", model.Email);
                    return RedirectToAction(nameof(Lockout));
                }
                else
                {
                    _logger.LogWarning("‚ùå Tentativa de login inv√°lida para {Email}.", model.Email);
                    
                    // üîí Registrar tentativa falhada
                    await _userRateLimitingService.RecordLoginAttemptAsync(model.Email, clientIp, false);
                    
                    ModelState.AddModelError(string.Empty, "Email ou senha inv√°lidos.");
                    return View(model);
                }
            }

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Logout()
        {
            await _signInManager.SignOutAsync();
            _logger.LogInformation("Usu√°rio fez logout.");
            return RedirectToAction("Index", "Home");
        }

        [HttpGet]
        public IActionResult Lockout()
        {
            return View();
        }

        [HttpGet]
        public IActionResult LoginWith2fa(bool rememberMe, string? returnUrl = null)
        {
            // Implementar autentica√ß√£o de dois fatores se necess√°rio
            return View();
        }
    }
}
